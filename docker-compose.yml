version: '3.8'

services:

  ds_backend:
      build:
        context: ./backend
        dockerfile: Dockerfile
      container_name: ds_backend_container
      env_file:
        - .env
      networks:
        - ds_network
      depends_on:
        mysql:
          condition: service_healthy

  # ds_frontend:
  #     build:
  #       context: ./frontend
  #       dockerfile: Dockerfile
  #     container_name: ds_frontend_container
  #     env_file:
  #       - .env
  #     networks:
  #       - ds_network

  mysql:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: ${MYSQL_CONTAINER_NAME}
    platform: linux/amd64
    stdin_open: true
    tty: true
    restart: always
    working_dir: /var/lib/mysql
    command: --bind-address=0.0.0.0
    ports:
      - ${MYSQL_PORT}:3306
    volumes:
      - ds_mysql_volume:/var/lib/mysql
    environment:
      MYSQL_ROOT_PASSWORD: ${MYSQL_ROOT_PASSWORD}
      MYSQL_DATABASE: ${MYSQL_DATABASE}
      MYSQL_USER: ${MYSQL_USER}
      MYSQL_PASSWORD: ${MYSQL_PASSWORD}
    healthcheck:
      test: ["CMD-SHELL", "mysqladmin ping -h localhost -u${MYSQL_USER} -p${MYSQL_PASSWORD} && mysql -u${MYSQL_USER} -p${MYSQL_PASSWORD} -e 'show databases;'"]
      timeout: 25s
      retries: 10
    networks:
      - ds_network
  nginx:
    image: nginx
    container_name: ds_nginx
    restart: always
    ports:
      - "80:80"
    volumes:
      - ./nginx.conf:/etc/nginx/conf.d/default.conf
    networks:
      - ds_network
    depends_on:
      - ds_backend

  k6:
    image: grafana/k6
    container_name: k6_container
    volumes:
      - ./tests:/tests  # 確保這裡掛載了包含測試腳本的目錄
    entrypoint: ["k6", "run", "/tests/test.js"]  # 確保路徑指向正確的測試腳本
    networks:
      - ds_network

volumes:
  ds_mysql_volume:
    name: ${MYSQL_VOLUME_PATH}


networks:
  ds_network:
    name: ds_backend_network
